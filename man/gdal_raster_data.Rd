% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/00_warpgeneral.R
\name{gdal_raster_data}
\alias{gdal_raster_data}
\title{General raster read and convert}
\usage{
gdal_raster_data(
  dsn,
  target_crs = NULL,
  target_dim = NULL,
  target_ext = NULL,
  target_res = NULL,
  resample = "near",
  bands = 1L,
  band_output_type = NULL,
  options = character()
)
}
\arguments{
\item{dsn}{data sources, files, urls, db strings, vrt, etc}

\item{target_crs}{projection of the target grid}

\item{target_dim}{dimension of the target grid}

\item{target_ext}{extent of the target grid}

\item{target_res}{resolution of the target grid}

\item{resample}{resampling algorith used}

\item{bands}{band or bands to include, default is first band only (use NULL or a value less that one to obtain all bands)}
}
\description{
The warper is used to convert source/s to an output file or to data in memory.
}
\details{
Two functions 'gdal_raster_data' and 'gdal_raster_dsn' act like the gdalwarp command line
tool, a convenience third function 'gdal_raster_image()' works especially for image data.
}
\examples{
dsn <- "inst/extdata/sst.tif"
par(mfrow = c(2, 2))
## do nothing, get native
X <- gdal_raster_data(dsn)
imfun(X)

## set resolution (or dimension, extent, crs, or combination thereof - GDAL will report/resolve incompatible opts)
X1 <- gdal_raster_data(dsn,  target_res = 1)
imfun(X1)
## warp whole grid to give res
X2 <- gdal_raster_data(dsn,  target_res = 25000, target_crs = "EPSG:32755")
imfun(X2)

## specify exactly (as per vapour originally)
X3 <- gdal_raster_data(dsn,  target_ext = c(-1, 1, -1, 1) * 8e6, target_dim = c(512, 678), target_crs = "+proj=stere +lon_0=147 +lat_0=-90")
imfun(X3)
}
