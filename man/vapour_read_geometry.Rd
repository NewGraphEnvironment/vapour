% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vapour_input_geometry.R
\name{vapour_read_geometry}
\alias{vapour_read_geometry}
\alias{vapour_read_geometry_text}
\alias{vapour_read_extent}
\alias{vapour_read_geometry_cpp}
\alias{vapour_read_geometry_text}
\alias{vapour_read_extent}
\title{Read GDAL feature geometry}
\usage{
vapour_read_geometry(dsource, layer = 0L, sql = "")

vapour_read_geometry_text(dsource, layer = 0L, sql = "",
  textformat = "json")

vapour_read_extent(dsource, layer = 0L, sql = "")
}
\arguments{
\item{dsource}{data source name (path to file, connection string, URL)}

\item{layer}{integer of layer to work with, defaults to the first (0)}

\item{sql}{if not empty this is executed against the data source (layer will be ignored)}

\item{textformat}{indicate text output format, available are "json" (default), "gml", "kml", "wkt"}
}
\description{
Read GDAL geometry as binary blob, text, or numeric extent.
}
\details{
\code{vapour_read_geometry} will read features as binary WKB, \code{vapour_read_geometry_text} as various text formats (geo-json, wkt, kml, gml),
\code{vapour_read_extent} a numeric extent which is the native bounding box, the four numbers (in this order) \code{xmin, xmax, ymin, ymax}.
For each function an optional SQL string will be evaluated against the data source before reading.

\code{vapour_read_geometry_cpp} will read a feature for each of the ways listed above and is used by those functions. It's recommended
to use the more specialist functions rather than this more general one.
}
