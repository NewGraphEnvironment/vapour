# Action script of tests conducted for all platforms. The complete suite
# of tests is described in .github/workflows/R-CMD-check-with-db.yaml

## MDSumner:
## configure.ac substantially modified, copied from rgdal/sf originally
## no trailing slash on PROJ_LIB=/usr/local/opt/proj/share/proj
## when using GDAL < 3 with PROJ >= 6 and auto set proj_api.h because WHY NOT
## C++11 implies GDAL 2.3.0 but we use 2.2.2 as a min
## with-data-copy seems to require also setting proj-data even if it's standard


on:
  push:
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}


    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          #- {os: macOS-latest, r: 'release', binary: 'CRAN', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
          - {os: macOS-latest, r: 'devel',   binary: 'CRAN', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
          #- {os: macOS-latest, r: 'release', binary: 'brew', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
          #- {os: macOS-latest, r: 'devel',   binary: 'brew', args: '--install-args=\"--configure-args=--with-data-copy=yes --with-proj-data=/usr/local/share/proj\"', build_args: ""}
          #- {os: ubuntu-16.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-18.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}


    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}

    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: MacOS CRAN-binary system dependencies
        if: runner.os == 'macOS' && matrix.config.binary == 'CRAN'
        run: |
           args=("gdal" "geos" "proj")
           pat=$(echo ${args[@]}|tr " " "|")
           curl -sL  https://mac.r-project.org/libs-4/ |
             sed -n 's/.*href=\([^>]*x86_64.tar.gz\).*/\1/p' |
             grep -E "$pat" |
             xargs -I % sh -c 'curl https://mac.r-project.org/libs-4/% --output %; sudo tar fvxz % -C /usr/local --strip 2'
           #curl -O https://mac.R-project.org/libs-4/gdal-2.4.2-darwin.17-x86_64.tar.gz
           #sudo tar fvxz gdal-2.4.2-darwin.17-x86_64.tar.gz -C /usr/local --strip 2
           #rm gdal-2.4.2-darwin.17-x86_64.tar.gz
           #curl -O https://mac.r-project.org/libs-4/geos-3.7.2-darwin.17-x86_64.tar.gz
           #sudo tar fvxz geos-3.7.2-darwin.17-x86_64.tar.gz -C /usr/local --strip 2
           #rm geos-3.7.2-darwin.17-x86_64.tar.gz
           #curl -O https://mac.r-project.org/libs-4/proj-5.2.0-darwin.17-x86_64.tar.gz
           #sudo tar fvxz proj-5.2.0-darwin.17-x86_64.tar.gz -C /usr/local --strip 2
           #rm proj-5.2.0-darwin.17-x86_64.tar.gz

      - name: MacOS brew system dependencies
        if: runner.os == 'macOS' && matrix.config.binary == 'brew'
        run: |
           brew install proj
           brew install geos
           brew install gdal

      - name: Query R package dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), "depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Linux system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc  ## required for sysreqs call below
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt update
          sudo -s eval "$sysreqs"

      - name: Cache R package dependencies
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: Install R package dependencies
        run: |
          library(remotes)
          deps <- readRDS("depends.Rds")
          deps[["installed"]] <- vapply(deps[["package"]], remotes:::local_sha, character(1))
          update(deps)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: R CMD check windows
        if: runner.os == 'Windows'
        run: rcmdcheck::rcmdcheck(args = c("--no-manual"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: R CMD check (not Windows)
        if: runner.os != 'Windows'
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "${{ matrix.config.args }}"), error_on = "warning", check_dir = "check", build_args = "${{ matrix.config.build_args }}")
        shell: Rscript {0}

      # - name: MacOS Configuration diagnostics (GDAL and PROJ data dirs)
      #   if: runner.os == 'macOS'
      #   run: |
      #     remotes::install_local(".", configure.args = "--with-data-copy=yes --with-proj-data=/usr/local/share/proj", force = TRUE)
      #     library(vapour)
      #     gd <- Sys.getenv("GDAL_DATA")
      #     print(sprintf("GDAL_DATA: %s", gd))
      #     pd <- Sys.getenv("PROJ_LIB")
      #     print(sprintf("PROJ_LIB: %s", pd))
      #     print(list.files(system.file("proj", package = "vapour")))
      #   shell: Rscript {0}
      #
      #
      # - name: Windows Configuration diagnostics (GDAL and PROJ data dirs)
      #   if: runner.os == 'Windows'
      #   run: |
      #     remotes::install_local(".", force = TRUE)
      #     library(vapour)
      #     gd <- Sys.getenv("GDAL_DATA")
      #     print(sprintf("GDAL_DATA: %s", gd))
      #     pd <- Sys.getenv("PROJ_LIB")
      #     print(sprintf("PROJ_LIB: %s", pd))
      #     print(list.files(system.file("proj", package = "vapour")))
      #   shell: Rscript {0}

#      - name: Build
#        run: |
#          pkg_path <- pkgbuild::build(binary = TRUE)
#          dir.create("build")
#          file.copy(pkg_path, "build")
#        shell: Rscript {0}


      - name: Upload check results
        if: failure() #success()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
